,,,
,번호,개념,설명
,1,빌더(Builder),작게 분리된 인스턴스를 건축 하듯이 조합하여 객체를 생성 객체의 생성 과정과 표현 방법을 분리 → 동일 객체 생성에서도 서로 다른 결과를 만들어 낼 수 있음
,2,프로토타입(Prototype),"원본 객체를 복제하는 방법으로 객체를 생성
테스트2"
,3,팩토리메서드(Factory Method),"생성할 객체의 클래스를 국한하지 않고 객체를 생성
상위 클래스에서 인터페이스만 정의, 실제 생성은 서브 클래스가 담당"
,4,추상팩토리(Abstract Factory),"인터페이스를 통해 서로 연관, 의존하는 객체들의 그룹으로 생성하여 추상적으로 표현
연관된 서브 클래스를 묶어 한 번에 교체하는 것이 가능"
,5,싱글톤(Singleton),"전역 변수 사용x, 한 클래스에 한 객체만 존재, 생성된 객체는 어디서든지 참조 가능, 여러 프로세스가 동시에 참조할 수는 없음"
,6,브리지(Bridge),"구현부에서 추상층을 분리 →  서로 독립적으로 확장할 수 있도록 구성한 패턴
기능과 구현을 두 개의 별도 클래스로 구현"
,7,프록시(Proxy),"실제 객체에 대한 대리 객체를 사용 → 메모리 용량↓, 정보은닉"
,8,퍼사드(Facade),"더 상위에 인터페이스를 구성함으로써 서브 클래스들의 기능을 간편하게 사용할 수 있도록 하는 패턴
서브 클래스들 사이의 통합 인터페이스를 제공하는 Wrapper 객체가 필요"
,9,플라이웨이트(Flyweight),"모두가 갖는 본질적 요소를 클래스 화하여 공유 → 메모리 절약, 클래스의 경량화"
,10,컴포지트(Composite),"복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용, 복합 객체 안에 복합 객체가 포함되는 구조를 구현 가능"
,11,데코레이터(Decorator),"객체 간 결합을 통해 능동적으로 기능들을 확장할 수 있는 패턴
임의의 객체에 부가적 기능을 추가하기 위해 다른 객체들을 덧붙이는 방식으로 구현"
,12,어댑터(Adapter),"기존에 생성된 클래스를 재사용할 수 있도록 중간에서 맞춰주는 인터페이스 패턴
클래스 패턴, 인스턴스 패턴 두 가지 형태로 사용"
,13,중재자(Mediator),"중재자를 만들어 중재자에게 모든 것을 요구하여 통신 빈도수를 낮추는 패턴
수많은 객체들 간 복잡한 상호작용을 캡슐화 → 객체로 정의하는 패턴, 객체 사이의 의존성 줄여 결합도를 감소시킬 수 있음"
,14,인터프리터(Interpreter),언어의 다양한 해석을 맞는 클래스를 각각 작성하여 여러 형태의 언어 구문을 해석할 수 있게 만드는 패턴
,15,이터레이터(Iterator),컬렉션 구현 방법을 노출하지 않으면서 그 집합체 안에 들어있는 모든 항목에 접근할 수 있는 방법을 제공하는 패턴
,16,템플릿메소드(Template Method),작업 처리 일부분을 서브 클래스로 캡슐화해 전체 수행 구조는 바꾸지 않으면서 특정 단계 수행 내역을 바꾸는 패턴
,17,옵저버(Observer),"한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체에 연락이 가고, 자동으로 내용이 갱신되는 방법"
,18,상태(State),"객체 상태를 캡슐화하여 클래스화함으로써 그것을 참조하게 하는 방식
상태에 따라 다르게 처리할 수 있도록 행위 내용 변경 가능"
,19,방문자(Visitor),"각 클래스에서 처리 기능을 분리, 별도 클래스 생성
클래스의 메서드가 각 클래스를 돌아다니며 특정 작업을 수행하도록 만드는 패턴"
,20,커맨드(Command),"요청을 객체 형태로 캡슐화 → 재이용하거나 취소할 수 있도록 요청에 필요 정보를 저장하거나 로그를 남기는 패턴
요청에 사용되는 각종 명령어들을 추상 클래스(인스턴스 생성 불가)와 구체 클래스로 분리, 단순화"
,21,전략(Strategy),"알고리즘 정의 후 각각 하나의 클래스로 캡슐화, 필요할 때 서로 교환해서 사용할 수 있게 하는 패턴
행위 객체를 클래스로 캡슐화 해 동적으로 자유롭게 변환"
,22,메멘토(Memento),"객체를 이전 상태로 복구시켜야 하는 경우, '작업취소(undo)' 요청"
,23,책임연쇄(Chain of Responsibility),"한 객체가 처리하지 못하면 다음 객체로 넘어가는 형태의 패턴
요청을 처리할 수 있는 각 객체들이 고리로 묶여 있어 요청이 해결될 때까지 고리를 따라 책임이 넘어감"
